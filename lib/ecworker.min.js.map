{"version":3,"sources":["webpack://gyrejs-[name]/webpack/universalModuleDefinition","webpack://gyrejs-[name]/webpack/bootstrap","webpack://gyrejs-[name]/./src/index_ecworker.ts","webpack://gyrejs-[name]/./src/ecmanager.ts"],"names":["root","factory","exports","module","define","amd","window","t","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","default","object","property","prototype","hasOwnProperty","p","s","e","[object Object]","this","projections","Map","cmdHandlers","events","commands","changeList","id","projection","set","cmdHandler","cmds","evts","concat","length","handleEvents","handleCommands","evt","push","cmd","list","clear","pop","forEach","applyEvent","getState","issue","bind","trigger","getProjectionState"],"mappings":"CAAA,SAAAA,EAAAC,GACA,iBAAAC,SAAA,iBAAAC,OACAA,OAAAD,QAAAD,IACA,mBAAAG,eAAAC,IACAD,OAAA,qBAAAH,GACA,iBAAAC,QACAA,QAAA,mBAAAD,IAEAD,EAAA,mBAAAC,IARA,CASCK,OAAA,WACD,gBAAAC,GCTA,IAAAC,KAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAR,QAGA,IAAAC,EAAAK,EAAAE,IACAC,EAAAD,EACAE,KACAV,YAUA,OANAW,EAAAH,GAAAI,KAAAX,EAAAD,QAAAC,IAAAD,QAAAO,GAGAN,EAAAS,KAGAT,EAAAD,QA2CA,OAtCAO,EAAAM,EAAAF,EAGAJ,EAAAO,EAAAR,EAGAC,EAAAQ,EAAA,SAAAf,EAAAgB,EAAAC,GACAV,EAAAW,EAAAlB,EAAAgB,IACAG,OAAAC,eAAApB,EAAAgB,GACAK,gBACAC,cACAC,IAAAN,KAMAV,EAAAiB,EAAA,SAAAxB,GACAmB,OAAAC,eAAApB,EAAA,cAAiDyB,YAIjDlB,EAAAmB,EAAA,SAAAzB,GACA,IAAAgB,EAAAhB,KAAA0B,WACA,WAA2B,OAAA1B,EAAA2B,SAC3B,WAAiC,OAAA3B,GAEjC,OADAM,EAAAQ,EAAAE,EAAA,IAAAA,GACAA,GAIAV,EAAAW,EAAA,SAAAW,EAAAC,GAAsD,OAAAX,OAAAY,UAAAC,eAAApB,KAAAiB,EAAAC,IAGtDvB,EAAA0B,EAAA,GAIA1B,IAAA2B,EAAA,GDzDA,ECyDA,SAAA7B,EAAA8B,EAAAT,GAAA,aAAAA,EAAAF,EAAAW,GChEA,UCOEC,cANQC,KAAAC,YAAuC,IAAIC,IAC3CF,KAAAG,YAA4C,IAAID,IAChDF,KAAAI,UACAJ,KAAAK,YACAL,KAAAM,WAA+B,IAAIJ,IAI3CH,cAAcQ,EAAYC,GACxBR,KAAKC,YAAYQ,IAAIF,EAAIC,GAG3BT,kBAAkBQ,EAAYG,GAC5BV,KAAKG,YAAYM,IAAIF,EAAIG,GAG3BX,QAAQY,EAAsBC,GAK5B,IAJAZ,KAAKI,OAASJ,KAAKI,OAAOS,OAAOD,GACjCZ,KAAKK,SAAWL,KAAKK,SAASQ,OAAOF,GAG9BX,KAAKI,OAAOU,QAAUd,KAAKK,SAASS,QAEzCd,KAAKe,eAGLf,KAAKgB,iBAITjB,QAAQkB,GACNjB,KAAKI,OAAOc,KAAKD,GAGnBlB,MAAMoB,GACJnB,KAAKK,SAASa,KAAKC,GAGrBpB,gBACE,MAAMqB,EAAO,IAAIlB,IAAIF,KAAKM,YAE1B,OADAN,KAAKM,WAAWe,QACTD,EAGDrB,eAKN,KAAOC,KAAKI,OAAOU,QAAQ,CACzB,MAAMG,EAAMjB,KAAKI,OAAOkB,MAExBtB,KAAKC,YAAYsB,QAAQ,CAACf,EAAYD,KAChCC,EAAWgB,WAAWP,IACxBjB,KAAKM,WAAWG,IAAIF,EAAIC,EAAWiB,eAMnC1B,iBACN,KAAOC,KAAKK,SAASS,QAAQ,CAC3B,MAAMK,EAAMnB,KAAKK,SAASiB,MAC1BtB,KAAKG,YAAYoB,QAASb,IACxBA,EAAWS,EAAKnB,KAAK0B,MAAMC,KAAK3B,MAAOA,KAAK4B,QAAQD,KAAK3B,MAAOA,KAAK6B,mBAAmBF,KAAK3B,UAK3FD,mBAAmBQ,GACzB,MAAMC,EAAaR,KAAKC,YAAYf,IAAIqB,GACxC,OAAIC,EACKA,EAAWiB,WAEb","file":"ecworker.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"gyrejs-ecworker\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"gyrejs-ecworker\"] = factory();\n\telse\n\t\troot[\"gyrejs-ecworker\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","import { ECManager } from './ecmanager';\n\n// Start the manager\nnew ECManager();\n","import { IGyreCommand, IGyreEvent, ICommandHandler } from './interfaces';\nimport { Projection } from './projection';\n\nexport class ECManager {\n  private projections: Map<string, Projection> = new Map();\n  private cmdHandlers: Map<string, ICommandHandler> = new Map();\n  private events: IGyreEvent[] = [];\n  private commands: IGyreCommand[] = [];\n  private changeList: Map<string, any> = new Map();\n\n  constructor() {}\n\n  addProjection(id: string, projection: Projection) {\n    this.projections.set(id, projection);\n  }\n\n  addCommandHandler(id: string, cmdHandler: ICommandHandler) {\n    this.cmdHandlers.set(id, cmdHandler);\n  }\n\n  execute(cmds: IGyreCommand[], evts: IGyreEvent[]) {\n    this.events = this.events.concat(evts);\n    this.commands = this.commands.concat(cmds);\n\n    // Handle all commands and events until done.\n    while (this.events.length || this.commands.length) {\n      // Apply currently available events to the projections and tasks.\n      this.handleEvents();\n\n      // Run all command handlers.\n      this.handleCommands();\n    }\n  }\n\n  trigger(evt: IGyreEvent) {\n    this.events.push(evt);\n  }\n\n  issue(cmd: IGyreCommand) {\n    this.commands.push(cmd);\n  }\n\n  getChangeList(): Map<string, any> {\n    const list = new Map(this.changeList);\n    this.changeList.clear();\n    return list;\n  }\n\n  private handleEvents() {\n    // Send event list to the tasks\n    // TODO invoke tasks\n\n    // Apply events to the projections\n    while (this.events.length) {\n      const evt = this.events.pop();\n\n      this.projections.forEach((projection, id) => {\n        if (projection.applyEvent(evt)) {\n          this.changeList.set(id, projection.getState());\n        }\n      });\n    }\n  }\n\n  private handleCommands() {\n    while (this.commands.length) {\n      const cmd = this.commands.pop();\n      this.cmdHandlers.forEach((cmdHandler: ICommandHandler) => {\n        cmdHandler(cmd, this.issue.bind(this), this.trigger.bind(this), this.getProjectionState.bind(this));\n      });\n    }\n  }\n\n  private getProjectionState(id: string): any {\n    const projection = this.projections.get(id);\n    if (projection) {\n      return projection.getState();\n    }\n    return null;\n  }\n}\n"],"sourceRoot":""}